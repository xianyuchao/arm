生成公钥
# ssh-keygen -t rsa -C "你注册github所用的邮箱地址"

查看公钥
# cat ~/.ssh/id_rsa






///windows git bash

ssh-keygen

一路回车
找到生成的 pub文件，在github网站添加该key

git init

git clone git@github.com:xianyuchao/arm.git

git clone git@github.com:michaelliao/bootstrap.git	//famous bootstrap



git commit -a //提交所有文件
git commit add.txt	//单个文件

git commit *.cpp *.h *.pro *.ui *.md .gitignore

git config --global user.email brother0952@163.com
git config --global user.name xianyuchao

git log		//查看日志



git reset  –hard HEAD~100	//回到前100个版本

git reflog		//回到最新

git checkout -f		//强制还原，不加参数不行


git checkout master	//回到主分支


git fetch --all
git reset --hard origin/master
git fetch 只是下载远程的库的内容，不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本


当对工作区新增或修改的文件执行 "git add" 命令时，暂存区的目录树被更新，同时工作区新增或修改的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。（如上图）

当执行提交操作 "git commit" 时，暂存区的目录树写到版本库的对象库（objects）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。（如上图）

当执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 当执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变。

当执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。

当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。


